{"version":3,"sources":["../../es6/classes/comprehensions.js"],"names":[],"mappings":";;;;;;AAAA,QAAQ,CAAC,gBAAgB,EAAE,YAAW;;AAErC,GAAE,CAAC,iCAAiC,EAAE,YAAU;;AAE/C,MAAI,KAAK,2BAAG,SAAR,KAAK,CAAa,KAAK,EAAE,GAAG;OAC3B,OAAO;;;;AAAP,aAAO,GAAG,KAAK;;;YACb,OAAO,IAAI,GAAG,CAAA;;;;;;aACb,OAAO;;;AACb,aAAO,IAAI,CAAC,CAAC;;;;;;;;MAJX,KAAK;GAMR,CAAA,CAAA;;AAED,MAAI,OAAO,GAAG,EAAE,CAAC;aACJ,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;AAApB,2CAAsB;AAAlB,OAAI,CAAC,WAAA,CAAA;AACR,UAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;GACpB;AACD,QAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;;;;;;EAQnC,CAAC,CAAC;;AAEH,GAAE,CAAC,yBAAyB,EAAE,YAAU;MAEjC,OAAO;AACD,YADN,OAAO,GACE;0BADT,OAAO;;AAEX,QAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACpB;;gBAHI,OAAO;;WAKA,wBAAW;uCAAP,KAAK;AAAL,WAAK;;;AACpB,SAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;KAC9C;;SACC,MAAM,CAAC,QAAQ;mCAAC;yFACT,CAAC;;;;;;;;;oBAAI,IAAI,CAAC,SAAS;;;;;;;;AAAnB,SAAC;;AACR,eAAO,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;;eAClB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAER;;;UAbI,OAAO;;;AAgBb,MAAI,MAAM,2BAAG,SAAT,MAAM,CAAa,KAAK,EAAE,SAAS;;;;;;;MAAnC,MAAM;GAOT,CAAA,CAAA;;;;;;;;AAED,MAAI,IAAI,2BAAG,SAAP,IAAI,CAAa,KAAK,EAAE,MAAM;OAC7B,KAAK,uFAED,IAAI;;;;;AAFR,WAAK,GAAG,CAAC;;YACV,MAAM,GAAG,CAAC,CAAA;;;;;;;;;;;;mBACG,KAAK;;;;;;;;AAAb,UAAI;;aACL,IAAI;;;AACV,WAAK,IAAI,CAAC,CAAC;;YACR,KAAK,IAAI,MAAM,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MANhB,IAAI;GAUP,CAAA,CAAA;;AAED,MAAI,KAAK,GAAG,CAAC,CAAC;AACd,MAAI,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;AAC5B,MAAI,KAAK,GAAG,SAAS,CAAC;AACtB,SAAO,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;;;;;;;AAEjD,yBAAoB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,UAAA,CAAC;WAAI,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG;IAAA,CAAC,EAAC,CAAC,CAAC,mIAAE;QAAvD,QAAQ;;AACf,SAAK,IAAI,CAAC,CAAC;AACX,SAAK,GAAG,QAAQ,CAAC;AACjB,WAAO,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC7B;;;;;;;;;;;;;;;;AAED,QAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACtB,QAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EAC1B,CAAC,CAAC;CAEH,CAAC,CAAC","file":"comprehensions.js","sourcesContent":["describe(\"comprehensions\", function() {\r\n\r\n\tit(\"can create arrays or generators\", function(){\r\n\r\n\t\tlet range = function*(start, end) {\r\n\t\t\tlet current = start;\r\n\t\t\twhile(current <= end) {\r\n\t\t\t\tyield current;\r\n\t\t\t\tcurrent += 1;\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet numbers = [];\r\n\t\tfor(let n of [1,2,3]) {\r\n\t\t\tnumbers.push(n * n);\r\n\t\t}\r\n\t\texpect(numbers).toEqual([1, 4, 9]);\r\n\r\n\t\t//let numbers = [for (n of [1,2,3]) if(n > 1) n * n];\r\n\t\t//expect(numbers).toEqual([4,9]);\r\n\r\n\t\t//let numbers2 = (for (n of [1,2,3]) n * n);\r\n\t\t//expect(Array.from(numbers2)).toEqual([1,4,9]);\r\n\r\n\t});\r\n\r\n\tit(\"can be used with yield*\", function(){\r\n\r\n\t\tclass Company {\t\r\n\t\t\tconstructor() {\r\n\t\t\t\tthis.employees = [];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\taddEmployees(...names) {\r\n\t\t\t\tthis.employees = this.employees.concat(names);\r\n\t\t\t}\t\r\n\t\t\t*[Symbol.iterator]() {\r\n\t\t\t\tfor(let e of this.employees) {\r\n\t\t\t\t\tconsole.log(\"yield\", e);\r\n\t\t\t\t\tyield e;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet filter = function*(items, predicate) {\t\t\t\r\n\t\t\t//yield* (for (item of items) if(predicate(item)) item);\r\n\t\t\t// for(let item of items) {\r\n\t\t\t// \tif(predicate(item)) {\r\n\t\t\t// \t\tyield item;\r\n\t\t\t// \t}\r\n\t\t\t// }\t\t\t\r\n\t\t}\r\n\r\n\t\tlet take = function*(items, number) {\r\n\t\t\tlet count = 0;\r\n\t\t\tif(number < 1) return;\r\n\t\t\tfor(let item of items) {\t\t\t\t\r\n\t\t\t\tyield item;\r\n\t\t\t\tcount += 1;\r\n\t\t\t\tif(count >= number) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet count = 0;\r\n\t\tlet company = new Company();\r\n\t\tlet found = undefined;\r\n\t\tcompany.addEmployees(\"Tim\", \"Sue\", \"Joy\", \"Tom\");\r\n\r\n\t\tfor(let employee of take(filter(company, e => e[0] == 'S'),1)) {\t\t\t\r\n\t\t\tcount += 1;\r\n\t\t\tfound = employee;\r\n\t\t\tconsole.log(\"got\", employee);\r\n\t\t}\r\n\r\n\t\texpect(count).toBe(1);\r\n\t\texpect(found).toBe(\"Sue\");\r\n\t});\r\n\r\n});"]}