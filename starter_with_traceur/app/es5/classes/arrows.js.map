{"version":3,"sources":["../../es6/classes/arrows.js"],"names":[],"mappings":";;AAAA,QAAQ,CAAC,iBAAiB,EAAE,YAAU;;AAErC,GAAE,CAAC,iDAAiD,EAAE,YAAU;;AAE/D,MAAI,GAAG,GAAG,SAAN,GAAG,CAAI,CAAC,EAAC,CAAC;UAAK,CAAC,GAAG,CAAC;GAAA,CAAC;AACzB,MAAI,MAAM,GAAG,SAAT,MAAM,CAAG,CAAC;UAAI,CAAC,GAAG,CAAC;GAAA,CAAC;;AAExB,QAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;EAElC,CAAC,CAAC;;AAEH,GAAE,CAAC,iDAAiD,EAAE,YAAU;;AAE/D,MAAI,GAAG,GAAG,SAAN,GAAG,CAAI,CAAC,EAAC,CAAC,EAAK;AAClB,OAAI,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;AACjB,UAAO,IAAI,CAAC;GACZ,CAAC;AACF,MAAI,MAAM,GAAG,SAAT,MAAM,CAAG,CAAC;UAAI,CAAC,GAAG,CAAC;GAAA,CAAC;AACxB,MAAI,KAAK,GAAG,SAAR,KAAK;UAAS,CAAC;GAAA,CAAC;;AAEpB,QAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;EAExC,CAAC,CAAC;;AAEH,GAAE,CAAC,gCAAgC,EAAE,YAAU;;AAE9C,MAAI,OAAO,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;;AAExB,MAAI,GAAG,GAAG,CAAC,CAAC;AACZ,SAAO,CAAC,OAAO,CAAC,UAAA,CAAC;UAAI,GAAG,IAAI,CAAC;GAAA,CAAC,CAAC;AAC/B,QAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;;AAErB,MAAI,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC;UAAI,CAAC,GAAG,CAAC;GAAA,CAAC,CAAC;AACtC,QAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;EACnC,CAAC,CAAC;;;;;;;;;;AAUH,GAAE,CAAC,sCAAsC,EAAE,UAAS,IAAI,EAAE;;AAEzD,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,MAAI,CAAC,IAAI,GAAG,OAAO,CAAC;;AAEpB,YAAU,CAAC,YAAW;AACrB,SAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAChC,OAAI,EAAE,CAAC;GACP,EAAC,EAAE,CAAC,CAAC;EAEN,CAAC,CAAC;;AAEH,GAAE,CAAC,sCAAsC,EAAE,UAAS,IAAI,EAAE;;;AAEzD,MAAI,CAAC,IAAI,GAAG,OAAO,CAAC;;AAEpB,YAAU,CAAC,YAAK;AACf,SAAM,CAAC,MAAK,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAChC,OAAI,EAAE,CAAC;GACP,EAAC,EAAE,CAAC,CAAC;EAEN,CAAC,CAAC;CAGH,CAAC,CAAC","file":"arrows.js","sourcesContent":["describe(\"arrow functions\", function(){\r\n\r\n\tit(\"provide a compact syntax to define a function 1\", function(){\r\n\r\n\t\tlet add = (x,y) => x + y;\r\n\t\tlet square = x => x * x;\r\n\r\n\t\texpect(square(add(2,3))).toBe(25);\r\n\r\n\t});\r\n\t\r\n\tit(\"provide a compact syntax to define a function 2\", function(){\r\n\r\n\t\tlet add = (x,y) => {\r\n\t\t\tlet temp = x + y;\r\n\t\t\treturn temp;\r\n\t\t};\r\n\t\tlet square = x => x * x;\r\n\t\tlet three = () => 3;\r\n\r\n\t\texpect(square(add(2,three()))).toBe(25);\r\n\r\n\t});\r\n\r\n\tit(\"can be used with array methods\", function(){\r\n\r\n\t\tvar numbers = [1,2,3,4];\r\n\r\n\t\tvar sum = 0;\r\n\t\tnumbers.forEach(n => sum += n);\r\n\t\texpect(sum).toBe(10);\r\n\r\n\t\tvar doubled = numbers.map(n => n * 2);\r\n\t\texpect(doubled).toEqual([2,4,6,8]);\r\n\t});\r\n\r\n\t//it(\"lexically binds to 'this' 1 - ************** NOT WORKING *************\", function(done) {\r\n\r\n\t\t//this.name = \"Scott\";\r\n\t\r\n\t\t//expect(this.name).toBe(\"Scott\");\r\n\t\t\r\n\t//});\r\n\t\r\n\tit(\"lexically binds to 'this' 2 (Asynch)\", function(done) {\r\n\r\n\t\tlet self = this;\r\n\t\tself.name = \"Scott\";\r\n\t\r\n\t\tsetTimeout(function() {\r\n\t\t\texpect(self.name).toBe(\"Scott\");\r\n\t\t\tdone(); //tell jasmine when the code is finished\r\n\t\t},15);\r\n\t\t\r\n\t});\r\n\t\r\n\tit(\"lexically binds to 'this' 3 (Asynch)\", function(done) {\r\n\r\n\t\tthis.name = \"Scott\";\r\n\t\r\n\t\tsetTimeout(()=> {\r\n\t\t\texpect(this.name).toBe(\"Scott\");\r\n\t\t\tdone(); //tell jasmine when the code is finished\r\n\t\t},15);\r\n\t\t\r\n\t});\r\n\t\r\n\t\r\n});"]}